-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1. List the number of films per category.
SELECT 
    category.name AS category,
    COUNT(film.film_id) AS number_of_films
FROM
    film
        INNER JOIN
    film_category ON film_category.film_id = film.film_id
        INNER JOIN
    category ON category.category_id = film_category.category_id
GROUP BY category.name;
-- 2. Retrieve the store ID, city, and country for each store.
SELECT 
    store.store_id, 
    address.city_id, 
    country.country
FROM
    store
        INNER JOIN
    address ON address.address_id = store.address_id
        INNER JOIN
    city ON city.city_id = address.city_id
        INNER JOIN
    country ON country.country_id = city.country_id;
-- 3. Calculate the total revenue generated by each store in dollars.
SELECT 
    store.store_id, 
    SUM(payment.amount) AS total_revenue
FROM
    payment
        INNER JOIN
    rental ON rental.rental_id = payment.rental_id
        INNER JOIN
    inventory ON inventory.inventory_id = rental.inventory_id
        INNER JOIN
    store ON store.store_id = inventory.store_id
GROUP BY store.store_id;
-- 4. Determine the average running time of films for each category.
SELECT 
    category.name AS category,
    CONCAT(ROUND(AVG(film.length)), ' ', 'hours') AS avg_running_time
FROM
    film
        INNER JOIN
    film_category ON film_category.film_id = film.film_id
        INNER JOIN
    category ON category.category_id = film_category.category_id
GROUP BY category.name;
-- Bonus:
-- 5. Identify the film categories with the longest average running time.
SELECT 
    category.name AS category,
    CONCAT(ROUND(AVG(film.length)), ' ', 'hours') AS avg_running_time
FROM
    film
        INNER JOIN
    film_category ON film_category.film_id = film.film_id
        INNER JOIN
    category ON category.category_id = film_category.category_id
GROUP BY category.name
ORDER BY avg_running_time DESC
LIMIT 1;
-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT 
    film.title, COUNT(rental.rental_id) AS rental_count
FROM
    film
        INNER JOIN
    inventory ON inventory.film_id = film.film_id
        INNER JOIN
    rental ON rental.inventory_id = inventory.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 10;
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
    film.title,
    CASE
        WHEN inventory.film_id IS NOT NULL THEN 'Available'
        ELSE 'Not Available'
    END AS verifcation
FROM
    film
        LEFT JOIN
    inventory ON inventory.film_id = film.film_id
        LEFT JOIN
    rental ON rental.inventory_id = inventory.inventory_id
WHERE
    film.title = 'Academy Dinosaur'
        AND inventory.store_id = 1;
-- 8. Provide a list of all distinct film titles, along with their availability 
-- status in the inventory. Include a column indicating whether each title 
-- is 'Available' or 'NOT available.' Note that there are 42 titles that 
-- are not in the inventory, and this information can be obtained using a 
-- CASE statement combined with IFNULL."
SELECT 
    film.title,
    CASE
        WHEN inventory.film_id IS NOT NULL THEN 'Available'
        ELSE 'Not Available'
    END AS verifcation
FROM
    film
        LEFT JOIN
    inventory ON inventory.film_id = film.film_id
ORDER BY film.title;